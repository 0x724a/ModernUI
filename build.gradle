buildscript {
    repositories {
        jcenter()
        maven {
            name "forge"
            url "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = 'icyllis.modernui'
archivesBaseName = 'ModernUI'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets {
    // no API, actually
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    test {
        compileClasspath += sourceSets.api.output + sourceSets.main.output
        runtimeClasspath += sourceSets.api.output + sourceSets.main.output
    }
}

configurations {
    def compileExtenders = [apiCompile, testCompile]
    def compileOnlyExtenders = [apiCompileOnly, testCompileOnly]
    def runtimeOnlyExtenders = [apiRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
    caffeine
    compile.extendsFrom(caffeine)
}

minecraft {
    mappings channel: 'snapshot', version: '20200707-1.16.1'

    accessTransformer(file('src/main/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                modernui {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                modernui {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            args '--all', '--output', file('src/generated/resources/')

            mods {
                modernui {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "tterrag maven"
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    caffeine "com.github.ben-manes.caffeine:caffeine:${caffeine_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")

    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compileOnly files('/libs/OptiFine_1.15.2_HD_U_G1_pre14_MOD_dev.jar')
}

processResources {

    inputs.property 'version', mod_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': mod_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    classifier("slim")
    manifest {
        attributes([
                "Specification-Title"     : "ModernUI",
                "Specification-Vendor"    : "BloCamLimb",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "BloCamLimb",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    classifier("universal")
    configurations = [project.configurations.caffeine]

    relocate 'com.google.errorprone', 'icyllis.errorprone'
    relocate 'org.checkerframe', 'icyllis.checkerframe'
    relocate 'com.github.benmanes.caffeine', 'icyllis.caffeine'

    exclude 'META-INF/LICENSE**'
    exclude 'META-INF/maven/**'
}

task buildDevJar(type: Jar) {
    classifier("userdev")
    from sourceSets.main.allJava
    from sourceSets.main.output
    exclude "**/**.otf"
}

reobf {
    shadowJar {}
}

// this doesn't work due to Cloudflare
if (System.getenv("CurseForgeAPI") != null) {
    curseforge {
        apiKey = System.getenv("CurseForgeAPI")
        project {
            id = '352491'
            changelogType = 'markdown'
            changelog = project.file('changelogs.md').getText()
            releaseType = "${release_type}"
            relations {
                optionalDependency 'optiforge'
                incompatible 'blur'
            }
            mainArtifact(jar) {
                // remove classifier
                displayName = project.version
            }
            //addArtifact devJar
        }
        options {
            debug = true
            detectNewerJava = true
        }
    }
}