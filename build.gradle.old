import net.minecraftforge.gradle.common.task.SignJar

buildscript {
    repositories {
        jcenter()
        maven {
            name "forge"
            url "https://files.minecraftforge.net/maven"
        }
        maven {
            name "sponge"
            url "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = 'icyllis.modernui'
archivesBaseName = 'ModernUI'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            exclude '**/*.psd'
            srcDirs += 'src/generated'
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        ext.refMap = "mixins.modernui.refmap.json"
    }
    test {
        compileClasspath += sourceSets.api.output + sourceSets.main.output
        runtimeClasspath += sourceSets.api.output + sourceSets.main.output
    }
}

configurations {
    def compileExtenders = [apiCompile, testCompile]
    def compileOnlyExtenders = [apiCompileOnly, testCompileOnly]
    def runtimeOnlyExtenders = [apiRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
    shade
    api.extendsFrom(shade)
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    accessTransformer(file('src/main/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                modernui {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                modernui {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'modernui', '--all', '--output', file('src/generated/')

            mods {
                modernui {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        name 'Gigaherz maven'
        url 'https://www.dogforce-games.com/maven/'
    }
    maven {
        name 'Google maven'
        url 'https://maven.google.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    shade "com.github.ben-manes.caffeine:caffeine:${caffeine_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compileOnly files('/libs/OptiFine_1.15.2_HD_U_G1_pre14_MOD_dev.jar')
    implementation 'org.jetbrains:annotations:15.0'

    // no longer use
    /*shade 'com.dslplatform:dsl-json-java8:1.9.5'
    annotationProcessor 'com.dslplatform:dsl-json-java8:1.9.5'
    compileOnly 'javax.json.bind:javax.json.bind-api:1.0'*/

    // no need to use flexmark-all
    shade "com.vladsch.flexmark:flexmark:${flexmark_version}"

    // fix mixin refMap generation because we have another annotation processor, mixin version depends on forge version
    // see https://github.com/SpongePowered/Mixin/blob/0.8.2/build.gradle for the following list
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    annotationProcessor 'org.ow2.asm:asm-tree:7.2'
    annotationProcessor 'org.ow2.asm:asm-commons:7.2'
    annotationProcessor 'org.ow2.asm:asm-util:7.2'
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.2'
}

processResources {

    inputs.property 'version', mod_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': mod_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    classifier("slim")
    manifest {
        attributes([
                "Specification-Title"     : "ModernUI",
                "Specification-Vendor"    : "BloCamLimb",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "BloCamLimb",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "icyllis.modernui.core.MixinConnector"
        ])
    }
}

shadowJar {
    classifier("universal")
    configurations = [project.configurations.shade]

    dependencies {
        exclude 'icu4j-59.1.jar'
        exclude 'commons-logging-1.2.jar'
    }

    relocate 'com.google.errorprone.annotations', 'icyllis.annotations'
    relocate 'org.checkerframe', 'icyllis.checkerframe'
    relocate 'com.github.benmanes.caffeine', 'icyllis.caffeine'
    /*relocate 'com.openhtmltopdf', 'icyllis.openhtmltopdf'
    relocate 'de.rototor.pdfbox', 'icyllis.pdfbox'
    relocate 'org.apache.fontbox', 'icyllis.fontbox'
    relocate 'org.apache.pdfbox', 'icyllis.pdfbox'
    relocate 'org.apache.xmpbox', 'icyllis.xmpbox'
    relocate 'org.jsoup', 'icyllis.jsoup'
    relocate 'org.nibor.autolink', 'icyllis.autolink'*/
    relocate 'com.vladsch.flexmark', 'icyllis.flexmark'
    relocate 'org.intellij.lang.annotations', 'icyllis.annotations'
    relocate 'org.jetbrains.annotations', 'icyllis.annotations'

    exclude 'META-INF/CHANGES'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE**'
    exclude 'META-INF/NOTICE**'
    exclude 'META-INF/README**'
    exclude 'META-INF/maven/**'
}

task buildDevJar(type: Jar) {
    classifier("userdev")
    from sourceSets.main.allJava
    from sourceSets.main.output
    exclude "**/**.otf"
}

reobf {
    shadowJar {}
}

task signJar(type: SignJar, dependsOn: reobfShadowJar) {
    onlyIf {
        project.hasProperty("jks")
    }
    if (project.hasProperty("jks")) {
        keyStore = project.getProperty("jks")
        alias = project.getProperty("jks_alias")
        storePass = project.getProperty("jks_pass")
        keyPass = project.getProperty("jks_keypass")
        inputFile = shadowJar.archivePath
        outputFile = shadowJar.archivePath
        /*exclude 'icyllis/annotations/**'
        exclude 'icyllis/caffeine/**'
        exclude 'icyllis/checkerframework/**'
        exclude 'icyllis/flexmark/**'*/
    }
}
build.dependsOn signJar

if (System.getenv("CurseForgeAPI") != null) {
    curseforge {
        apiKey = System.getenv("CurseForgeAPI")
        project {
            id = '352491'
            changelogType = 'markdown'
            changelog = project.file('changelogs.md').getText()
            releaseType = "${release_type}"
            relations {
                optionalDependency 'optiforge'
                incompatible 'blur'
            }
            mainArtifact(jar) {
                // remove classifier
                displayName = project.version
            }
            //addArtifact devJar
        }
        options {
            debug = true
            detectNewerJava = true
        }
    }
}