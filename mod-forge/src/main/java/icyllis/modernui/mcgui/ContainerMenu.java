/*
 * Modern UI.
 * Copyright (C) 2019-2021 BloCamLimb. All rights reserved.
 *
 * Modern UI is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Modern UI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Modern UI. If not, see <https://www.gnu.org/licenses/>.
 */

package icyllis.modernui.mcgui;

import icyllis.modernui.forge.MuiForgeApi;
import net.minecraft.MethodsReturnNonnullByDefault;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.*;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;

import javax.annotation.ParametersAreNonnullByDefault;
import java.util.function.Consumer;

/**
 * Extension to {@link AbstractContainerMenu} that provides a high level of functionality
 * for interactions with item stacks in Modern UI.
 */
//TODO
@MethodsReturnNonnullByDefault
@ParametersAreNonnullByDefault
public class ContainerMenu extends AbstractContainerMenu {

    /**
     * This constructor should be only used on client.
     * Indicates that this menu is only used for view layout without any network communication.
     */
    @OnlyIn(Dist.CLIENT)
    public ContainerMenu() {
        super(null, 0);
    }

    /**
     * This constructor is used with container menus with network communication.
     * The initiator must be server, and the client uses the same constructor and arguments.
     * <p>
     * The container ID generated by the server to avoid operating the dead menu in the
     * network packet due to network latency.
     * <p>
     * On the server, you should call {@link MuiForgeApi#openMenu(Player, MenuConstructor, Consumer)},
     * whose {@link MenuConstructor} provides you container id. On the client, you should
     * register the menu type via {@link net.minecraftforge.common.extensions.IForgeContainerType} along
     * with {@link net.minecraftforge.event.RegistryEvent},
     * whose {@link net.minecraftforge.fmllegacy.network.IContainerFactory} provides you container id and
     * the additional data sent by server.
     *
     * @param menuType    the registry entry for the menu, cannot be null
     * @param containerId the container id, the value cannot be specified by users
     */
    public ContainerMenu(MenuType<?> menuType, int containerId) {
        super(menuType, containerId);
    }

    @Deprecated
    @Override
    protected final DataSlot addDataSlot(DataSlot intValue) {
        throw new UnsupportedOperationException();
    }

    @Deprecated
    @Override
    protected final void addDataSlots(ContainerData array) {
        throw new UnsupportedOperationException();
    }

    @Deprecated
    @Override
    public final void setData(int id, int data) {
        throw new UnsupportedOperationException();
    }

    /**
     * This method will be called every tick to determine
     * whether the menu should be closed intrinsically. This is a server-side logic.
     * Unless you use {@link #ContainerMenu()}, you should implement this method.
     * Otherwise, it only depends on certain behaviors of the client.
     *
     * @param player the player using this menu (should be server player)
     * @return {@code false} to close this menu on server, also send a packet to client
     */
    @Override
    public boolean stillValid(Player player) {
        return true;
    }
}
