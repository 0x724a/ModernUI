/*
 * Arc UI.
 * Copyright (C) 2022-2022 BloCamLimb. All rights reserved.
 *
 * Arc UI is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Arc UI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Arc UI. If not, see <https://www.gnu.org/licenses/>.
 */

package icyllis.arcui.engine;

import javax.annotation.Nonnull;

/**
 * This class is used to generate a generic program cache key. The OpenGL and Vulkan backends
 * derive backend-specific versions which add additional information.
 */
public class ProgramDesc extends KeyBuilder {

    /**
     * Builds a program descriptor.
     *
     * @param desc        The built descriptor
     * @param programInfo Program information need to build the key
     * @param caps        the caps
     */
    @Nonnull
    public static ProgramDesc build(ProgramDesc desc, ProgramInfo programInfo, Caps caps) {
        desc.reset();
        genKey(desc, programInfo, caps);
        return desc;
    }

    static void genKey(KeyBuilder b,
                       ProgramInfo programInfo,
                       Caps caps) {
        genGPKey(programInfo.geomProc(), b);

        //TODO more keys

        // Put a clean break between the "common" data written by this function, and any backend data
        // appended later. The initial key length will just be this portion (rounded to 4 bytes).
        b.flush();
    }

    /**
     * Functions which emit processor key info into the key builder.
     * For every effect, we include the effect's class ID (different for every GrProcessor subclass),
     * any information generated by the effect itself (addToKey), and some meta-information.
     * Shader code may be dependent on properties of the effect not placed in the key by the effect
     * (e.g. pixel format of textures used).
     */
    static void genGPKey(GeometryProcessor geomProc, KeyBuilder b) {
        b.appendComment(geomProc.name());
        // Currently we allow 8 bits for the class id
        b.addBits(8, geomProc.classID(), "gpClassID");

        geomProc.addToKey(b);
        geomProc.getAttributeKey(b);

        int numTextureSamplers = geomProc.numTextureSamplers();
        b.add32(numTextureSamplers, "gpNumSamplers");
        for (int i = 0; i < numTextureSamplers; ++i) {
            final var sampler = geomProc.textureSampler(i);
            final var backendFormat = sampler.backendFormat();

            b.addBits(2, backendFormat.textureType(), "textureType");
            b.addBits(16, sampler.swizzle(), "swizzle");
        }
    }
}
